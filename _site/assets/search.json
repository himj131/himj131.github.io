

[
  
  
    
    
      {
        "title": "Kafka 기본 개념",
        "excerpt": "카프카란\n카프카는 Pub/Sub 모델 기반의 메시징 서버로, 링크드인에서 자체적으로 사용하기 위해 만든 분산 데이터 스트림 플랫폼이다.\n기존 메세징 시스템에 비해 처리량이 높고, 파티셔닝이나 복제기능을 갖고 있어 대규모 메시지 처리에 적합한 시스템이다.\n\n카프카는 사내 모든 데이터시스템이나 마이크로서비스와 연결된 이벤트/데이터 스트림 파이프라인의 중앙허브 역할을 목적으로 개발되었고,\n카프카 로고에도 이런 철학이 잘 반영되어 있다.\n\n\n\n카프카의 특징은 다음과 같다.\n\n멀티 프로듀서, 멀티 컨슈머\n하나의 토픽에 여러 프로듀서나 컨슈머가 접근 가능하다.\n프로듀서는 하나 이상의 토픽에 메세지를 보낼수 있고, 컨슈머 역시 하나 이상의 토픽으로부터 메세지를 읽어올 수 있다.\n\n메세지의 저장\n일반적인 메시징 시스템에서는 컨슈머가 메시지를 읽어가면 큐에서 바로 메시지를 삭제한다. \n하지만 카프카는 일정 주기만큼 메시지를 디스크에 저장해둔다.\n따라서 컨슈머의 메시지 처리가 늦어지거나 컨슈머의 중단이 발생하더라도 메시지의 손실이 없으며, \n한번 읽은 메시지를 여러번 다시 읽을 수 있다.\n\n확장성(Scalability)\n카프카 클러스터는 3개(권장)의 브로커에서 수십대의 브로커로 확장이 가능하다. 확장 작업도 서비스 중단없이 비교적 간단하게 진행할 수 있다.\n\n빠른 처리 속도\n카프카는 배치전송(작은 메시지들을 묶어 한번에 보내서 네트워크 왕복 오버헤드를 줄임)과 \n페이지 캐시(메모리의 일부를 사용)를 사용해 속도가 빠르다.\n\n고가용성(High availability), 결함에 강함(Fault-tolerant)\n카프카는 분산 시스템을 사용하기 때문에 단일 시스템보다 더 높은 성능을 얻을 수 있고 시스템 확장이 용이하다. 또한 분산시스템 중 하나의 서버에 \n장애가 발생해도 다른 서버가 데이터 손실 없이 작업을 대신한다.\n\n2PC(PhaseCommit)\n카프카는 정확히 한번의 메시지 저장을 보장한다……….(작업예정)\n\nKafka 구성 요소와 역할\n\n\n\n  Zookeeper(주키퍼)\n    \n      카프카는 분산 애플리케이션을 관리하는 코디네이션으로 주키퍼를 사용한다.\n      주키퍼는 분산 각 애플리케이션의 정보를 관리하고, 동기화등을 처리한다.\n      분산 애플리케이션들은 각각 클라이언트가 되어 주키퍼 서버들과 커넥션을 맺어 상태정보 등을 주고 받는다.\n      상태 정보들은 주키퍼 지노드(znode)라 불리는곳에 key-value 형태로 저장되고 이값을 가지고 분산 애플리케이션들은 서로 데이터를 주고 받는다.\n    \n  \n  Broker(브로커)\n    \n      카프카 애플리케이션이 설치되어 있는 서버로 데이터 저장소 역할을 한다.\n    \n  \n  Topic(토픽) 과 Partition(파티션)\n    \n      토픽은 데이터를 구분하는 논리적 개념이고, 파티션은 토픽을 분할한 데이터 저장소 이다.\n      파티션마다 리플리케이션이 동작해 각 브로커마다 리더/팔로워가 설정되어 있다.\n      파티션 수는 한 번 설정하면 증가는 가능하지만 줄일 수는 없다.\n    \n  \n  Producer(프로듀서)\n    \n      메시지를 생산하는 애플리케이션으로, 브로커의 토픽을 지정하여 메시지를 보낸다.\n    \n  \n  Consumer(컨슈머)\n    \n      저장된 메시지를 가져가서 사용하는 서버 또는 애플리케이션\n      특정 파티션을 관리하고 있는 파티션 리더에게 메시지 가져오기 요청을 한다.\n      각 요청에 오프셋을 명시할 수 있어, 컨슈머는 가져올 메시지의 위치를 조정할 수 있고, 이미 가져온 데이터도 다시 가져올 수 있다.\n    \n  \n\n\nKafka 동작 방식\n카프카에서 각 파티션마다 메시지가 저장되는 위치를 오프셋이라고 한다. 오프셋은 파티션내에서 순차증가하는 유일한 숫자이다. 카프카는 오프셋을 통해 메시지\n순서를 보장한다.\n",
        "content": "카프카란\n카프카는 Pub/Sub 모델 기반의 메시징 서버로, 링크드인에서 자체적으로 사용하기 위해 만든 분산 데이터 스트림 플랫폼이다.\n기존 메세징 시스템에 비해 처리량이 높고, 파티셔닝이나 복제기능을 갖고 있어 대규모 메시지 처리에 적합한 시스템이다.\n\n카프카는 사내 모든 데이터시스템이나 마이크로서비스와 연결된 이벤트/데이터 스트림 파이프라인의 중앙허브 역할을 목적으로 개발되었고,\n카프카 로고에도 이런 철학이 잘 반영되어 있다.\n\n\n\n카프카의 특징은 다음과 같다.\n\n멀티 프로듀서, 멀티 컨슈머\n하나의 토픽에 여러 프로듀서나 컨슈머가 접근 가능하다.\n프로듀서는 하나 이상의 토픽에 메세지를 보낼수 있고, 컨슈머 역시 하나 이상의 토픽으로부터 메세지를 읽어올 수 있다.\n\n메세지의 저장\n일반적인 메시징 시스템에서는 컨슈머가 메시지를 읽어가면 큐에서 바로 메시지를 삭제한다. \n하지만 카프카는 일정 주기만큼 메시지를 디스크에 저장해둔다.\n따라서 컨슈머의 메시지 처리가 늦어지거나 컨슈머의 중단이 발생하더라도 메시지의 손실이 없으며, \n한번 읽은 메시지를 여러번 다시 읽을 수 있다.\n\n확장성(Scalability)\n카프카 클러스터는 3개(권장)의 브로커에서 수십대의 브로커로 확장이 가능하다. 확장 작업도 서비스 중단없이 비교적 간단하게 진행할 수 있다.\n\n빠른 처리 속도\n카프카는 배치전송(작은 메시지들을 묶어 한번에 보내서 네트워크 왕복 오버헤드를 줄임)과 \n페이지 캐시(메모리의 일부를 사용)를 사용해 속도가 빠르다.\n\n고가용성(High availability), 결함에 강함(Fault-tolerant)\n카프카는 분산 시스템을 사용하기 때문에 단일 시스템보다 더 높은 성능을 얻을 수 있고 시스템 확장이 용이하다. 또한 분산시스템 중 하나의 서버에 \n장애가 발생해도 다른 서버가 데이터 손실 없이 작업을 대신한다.\n\n2PC(PhaseCommit)\n카프카는 정확히 한번의 메시지 저장을 보장한다……….(작업예정)\n\nKafka 구성 요소와 역할\n\n\n\n  Zookeeper(주키퍼)\n    \n      카프카는 분산 애플리케이션을 관리하는 코디네이션으로 주키퍼를 사용한다.\n      주키퍼는 분산 각 애플리케이션의 정보를 관리하고, 동기화등을 처리한다.\n      분산 애플리케이션들은 각각 클라이언트가 되어 주키퍼 서버들과 커넥션을 맺어 상태정보 등을 주고 받는다.\n      상태 정보들은 주키퍼 지노드(znode)라 불리는곳에 key-value 형태로 저장되고 이값을 가지고 분산 애플리케이션들은 서로 데이터를 주고 받는다.\n    \n  \n  Broker(브로커)\n    \n      카프카 애플리케이션이 설치되어 있는 서버로 데이터 저장소 역할을 한다.\n    \n  \n  Topic(토픽) 과 Partition(파티션)\n    \n      토픽은 데이터를 구분하는 논리적 개념이고, 파티션은 토픽을 분할한 데이터 저장소 이다.\n      파티션마다 리플리케이션이 동작해 각 브로커마다 리더/팔로워가 설정되어 있다.\n      파티션 수는 한 번 설정하면 증가는 가능하지만 줄일 수는 없다.\n    \n  \n  Producer(프로듀서)\n    \n      메시지를 생산하는 애플리케이션으로, 브로커의 토픽을 지정하여 메시지를 보낸다.\n    \n  \n  Consumer(컨슈머)\n    \n      저장된 메시지를 가져가서 사용하는 서버 또는 애플리케이션\n      특정 파티션을 관리하고 있는 파티션 리더에게 메시지 가져오기 요청을 한다.\n      각 요청에 오프셋을 명시할 수 있어, 컨슈머는 가져올 메시지의 위치를 조정할 수 있고, 이미 가져온 데이터도 다시 가져올 수 있다.\n    \n  \n\n\nKafka 동작 방식\n카프카에서 각 파티션마다 메시지가 저장되는 위치를 오프셋이라고 한다. 오프셋은 파티션내에서 순차증가하는 유일한 숫자이다. 카프카는 오프셋을 통해 메시지\n순서를 보장한다.\n",
        "url": "/kafka/2020/11/29/kafka-one/"
      },
    
  
  
  
  {
    "title": "Categories",
    "excerpt": "Category index\n",
    "content": "\n",
    "url": "/categories/"
  },
  
  {
    "title": "Elements",
    "excerpt": "A demo of Markdown and HTML includes\n",
    "content": "Heading 1\n\nHeading 2\n\nHeading 3\n\nHeading 4\n\nHeading 5\n\nHeading 6\n\nA small element\n\nA link\n\nLorem ipsum dolor sit amet, consectetur adip* isicing elit, sed do eiusmod *tempor incididunt ut labore et dolore magna aliqua.\n\nDuis aute irure dolor in A link reprehenderit in voluptate velit esse cillum bold text dolore eu fugiat nulla pariatur. Excepteur span element sint occaecat cupidatat non proident, sunt italicised text in culpa qui officia deserunt mollit anim id some code est laborum.\n\n\n  An item\n  An item\n  An item\n  An item\n  An item\n\n\n\n  Item one\n  Item two\n  Item three\n  Item four\n  Item five\n\n\n\n  A simple blockquote\n\n\nSome HTML…\n\n&lt;blockquote cite=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;\n  &lt;p&gt;You planning a vacation, Mr. Sullivan?&lt;/p&gt;\n  &lt;footer&gt;\n    &lt;a href=\"http://www.imdb.com/title/tt0284978/quotes/qt1375101\"&gt;Sunways Security Guard&lt;/a&gt;\n  &lt;/footer&gt;\n&lt;/blockquote&gt;\n\n\n…CSS…\n\nblockquote {\n  text-align: center;\n  font-weight: bold;\n}\nblockquote footer {\n  font-size: .8rem;\n}\n\n\n…and JavaScript\n\nconst blockquote = document.querySelector(\"blockquote\")\nconst bolden = (keyString, string) =&gt;\n  string.replace(new RegExp(keyString, 'g'), '&lt;strong&gt;'+keyString+'&lt;/strong&gt;')\n\nblockquote.innerHTML = bolden(\"Mr. Sullivan\", blockquote.innerHTML)\n\n\nSingle line of code\n\nHTML Includes\n\nContact form\n\n\n  \n    Contact\n    Name: *\n    \n\n    Email Address: *\n    \n\n    Message: *\n    \n\n    \n    \n    * indicates a required field\n\n    \n      \n      \n      \n    \n  \n\n\n\n\nPlease enable JavaScript to use the form.\n\n{% include site-form.html %}\n\n\nDemo map embed\n\n\n\n{% include map.html id=\"XXXXXX\" title=\"Coffee shop map\" %}\n\n\nButton include\n\nA button\n\nA button with icon  twitter\n\n\n{% include button.html text=\"A button\" link=\"https://david.darn.es\" %}\n{% include button.html text=\"A button with icon\" link=\"https://twitter.com/daviddarnes\" icon=\"twitter\" %}\n\n\nIcon include\n\ntwitter\ntwitter\n\n\n{% include icon.html id=\"twitter\" title=\"twitter\" %}\n[{% include icon.html id=\"linkedin\" title=\"twitter\" %}](https://www.linkedin.com/in/daviddarnes)\n\n\nVideo include\n\n\n  \n\n\n{% include video.html id=\"zrkcGL5H3MU\" title=\"Siteleaf tutorial video\" %}\n\n\nImage includes\n\n\n  \n  Image with caption\n\n\n\n  \n  Right aligned image\n\n\n\n  \n  Left aligned image\n\n\n\n  \n  \n\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Image with caption\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Right aligned image\" position=\"right\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/600/800?image=894\" caption=\"Left aligned image\" position=\"left\" width=\"300\" height=\"800\" %}\n\n{% include figure.html image=\"https://picsum.photos/1600/800?image=894\" alt=\"Image with just alt text\" %}\n\n",
    "url": "/elements/"
  },
  
  {
    "title": "작업중인 블로그",
    "excerpt": "Alembic is a starting point for Jekyll projects. Rather than starting from scratch, this boilerplate is designed to get the ball rolling immediately. Install it, configure it, tweak it, push it.\n",
    "content": "안녕하세요.\n\nFork it  github\n\n Buy me a coffee ☕️\n Tweet it  twitter\n\n Install Alembic ⚗️\n\nFeatures\n\n\n  Available as a theme gem and GitHub Pages theme\n  Clear and elegant design that can be used out of the box or as solid starting point\n  Tested in all major browsers, including IE and Edge\n  Built in Service Worker so it can work offline and on slow connections\n  Configurable colours and typography in a single settings file\n  Extensive set of shortcodes to include various elements; such as buttons, icons, figure images and more\n  Solid typographic framework from Sassline\n  Configurable navigation via a single file\n  Modular Jekyll components\n  Post category support in the form of a single post index page grouped by category\n  Built in live search using JavaScript\n  Contact form built in using Formspree\n  Designed with Siteleaf in mind\n  Has 9 of the most popular networks as performant sharing buttons\n  Has documentation\n\n\nExamples\n\nHere are a few examples of Alembic out in the wild being used in a variety of ways:\n\n\n  bawejakunal.github.io\n  case2111.github.io\n  karateca.org\n\n\nInstallation\n\nQuick setup\n\nTo give you a running start I’ve put together some starter kits that you can download, fork or even deploy immediately:\n\n\n  ⚗️🍨 Vanilla Jekyll starter kit\n\n  ⚗️🌲 Forestry starter kit\n\n\n  \n    ⚗️💠 Netlify CMS starter kit\n\n  \n  \n    ⚗️:octocat: GitHub Pages with remote theme kit\nDownload kit\n  \n  ⚗️🚀 Stackbit starter kit\n\n\n\nAs a Jekyll theme\n\n\n  Add gem \"alembic-jekyll-theme\" to your Gemfile to add the theme as a dependancy\n  Run the command bundle install in the root of project to install the theme and its dependancies\n  Add theme: alembic-jekyll-theme to your _config.yml file to set the site theme\n  Run bundle exec jekyll serve to build and serve your site\n  Done! Use the configuration documentation and the example _config.yml file to set things like the navigation, contact form and social sharing buttons\n\n\nAs a GitHub Pages remote theme\n\n\n  Add gem \"jekyll-remote-theme\" to your Gemfile to add the theme as a dependancy\n  Run the command bundle install in the root of project to install the jekyll remote theme gem as a dependancy\n  Add jekyll-remote-theme to the list of plugins in your _config.yml file\n  Add remote_theme: daviddarnes/alembic to your _config.yml file to set the site theme\n  Run bundle exec jekyll serve to build and serve your site\n  Done! Use the configuration documentation and the example _config.yml file to set things like the navigation, contact form and social sharing buttons\n\n\nAs a Boilerplate / Fork\n\n(deprecated, not recommended)\n\n\n  Fork the repo\n  Replace the Gemfile with one stating all the gems used in your project\n  Delete the following unnecessary files/folders: .github, LICENSE, screenshot.png, CNAME and alembic-jekyll-theme.gemspec\n  Run the command bundle install in the root of project to install the jekyll remote theme gem as a dependancy\n  Run bundle exec jekyll serve to build and serve your site\n  Done! Use the configuration documentation and the example _config.yml file to set things like the navigation, contact form and social sharing buttons\n\n\nCustomising\n\nWhen using Alembic as a theme means you can take advantage of the file overriding method. This allows you to overwrite any file in this theme with your own custom file, by matching the file name and path. The most common example of this would be if you want to add your own styles or change the core style settings.\n\nTo add your own styles copy the styles.scss into your own project with the same file path (assets/styles.scss). From there you can add your own styles, you can even optionally ignore the theme styles by removing the @import \"alembic\"; line.\n\nIf you’re looking to set your own colours and fonts you can overwrite them by matching the variable names from the _settings.scss file in your own styles.scss, make sure to state them before the @import \"alembic\"; line so they take effect. The settings are a mixture of custom variables and settings from Sassline - follow the link to find out how to configure the typographic settings.\n",
    "url": "/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": "{% include site-search.html %}\n",
    "url": "/search/"
  }
  
]

