<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2020-11-30T01:58:43+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">himj</title><subtitle>Alembic is a starting point for Jekyll projects. Rather than starting from scratch, this boilerplate is designed to get the ball rolling immediately</subtitle><author><name>MJ</name></author><entry><title type="html">Kafka 기본 개념</title><link href="http://localhost:4000/kafka/2020/11/29/kafka-one/" rel="alternate" type="text/html" title="Kafka 기본 개념" /><published>2020-11-29T00:00:00+00:00</published><updated>2020-11-29T00:00:00+00:00</updated><id>http://localhost:4000/kafka/2020/11/29/kafka-one</id><content type="html" xml:base="http://localhost:4000/kafka/2020/11/29/kafka-one/">&lt;h2 id=&quot;카프카란&quot;&gt;카프카란&lt;/h2&gt;
&lt;p&gt;카프카는 Pub/Sub 모델 기반의 메시징 서버로, 링크드인에서 자체적으로 사용하기 위해 만든 분산 데이터 스트림 플랫폼이다.
기존 메세징 시스템에 비해 처리량이 높고, 파티셔닝이나 복제기능을 갖고 있어 대규모 메시지 처리에 적합한 시스템이다.&lt;/p&gt;

&lt;p&gt;카프카는 사내 모든 데이터시스템이나 마이크로서비스와 연결된 이벤트/데이터 스트림 파이프라인의 중앙허브 역할을 목적으로 개발되었고,
카프카 로고에도 이런 철학이 잘 반영되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;&lt;img src=&quot;/assets/images/kafka/kafkalogo.png&quot; alt=&quot;카프카 로고&quot; width=&quot;500&quot; height=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;카프카의 특징은 다음과 같다.&lt;/p&gt;

&lt;h5 id=&quot;멀티-프로듀서-멀티-컨슈머&quot;&gt;멀티 프로듀서, 멀티 컨슈머&lt;/h5&gt;
&lt;p&gt;하나의 토픽에 여러 프로듀서나 컨슈머가 접근 가능하다.
프로듀서는 하나 이상의 토픽에 메세지를 보낼수 있고, 컨슈머 역시 하나 이상의 토픽으로부터 메세지를 읽어올 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;메세지의-저장&quot;&gt;메세지의 저장&lt;/h5&gt;
&lt;p&gt;일반적인 메시징 시스템에서는 컨슈머가 메시지를 읽어가면 큐에서 바로 메시지를 삭제한다. 
하지만 카프카는 일정 주기만큼 메시지를 디스크에 저장해둔다.
따라서 컨슈머의 메시지 처리가 늦어지거나 컨슈머의 중단이 발생하더라도 메시지의 손실이 없으며, 
한번 읽은 메시지를 여러번 다시 읽을 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;확장성scalability&quot;&gt;확장성(Scalability)&lt;/h5&gt;
&lt;p&gt;카프카 클러스터는 3개(권장)의 브로커에서 수십대의 브로커로 확장이 가능하다. 확장 작업도 서비스 중단없이 비교적 간단하게 진행할 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;빠른-처리-속도&quot;&gt;빠른 처리 속도&lt;/h5&gt;
&lt;p&gt;카프카는 배치전송(작은 메시지들을 묶어 한번에 보내서 네트워크 왕복 오버헤드를 줄임)과 
페이지 캐시(메모리의 일부를 사용)를 사용해 속도가 빠르다.&lt;/p&gt;

&lt;h5 id=&quot;고가용성high-availability-결함에-강함fault-tolerant&quot;&gt;고가용성(High availability), 결함에 강함(Fault-tolerant)&lt;/h5&gt;
&lt;p&gt;카프카는 분산 시스템을 사용하기 때문에 단일 시스템보다 더 높은 성능을 얻을 수 있고 시스템 확장이 용이하다. 또한 분산시스템 중 하나의 서버에 
장애가 발생해도 다른 서버가 데이터 손실 없이 작업을 대신한다.&lt;/p&gt;

&lt;h5 id=&quot;2pcphasecommit&quot;&gt;2PC(PhaseCommit)&lt;/h5&gt;
&lt;p&gt;카프카는 정확히 한번의 메시지 저장을 보장한다……….(작업예정)&lt;/p&gt;

&lt;h2 id=&quot;kafka-구성-요소와-역할&quot;&gt;Kafka 구성 요소와 역할&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/kafka/kafkazookeeper.png&quot; alt=&quot;카프카 로고&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Zookeeper(주키퍼)
    &lt;ul&gt;
      &lt;li&gt;카프카는 분산 애플리케이션을 관리하는 코디네이션으로 주키퍼를 사용한다.&lt;/li&gt;
      &lt;li&gt;주키퍼는 분산 각 애플리케이션의 정보를 관리하고, 동기화등을 처리한다.&lt;/li&gt;
      &lt;li&gt;분산 애플리케이션들은 각각 클라이언트가 되어 주키퍼 서버들과 커넥션을 맺어 상태정보 등을 주고 받는다.&lt;/li&gt;
      &lt;li&gt;상태 정보들은 주키퍼 지노드(znode)라 불리는곳에 key-value 형태로 저장되고 이값을 가지고 분산 애플리케이션들은 서로 데이터를 주고 받는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Broker(브로커)
    &lt;ul&gt;
      &lt;li&gt;카프카 애플리케이션이 설치되어 있는 서버로 데이터 저장소 역할을 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Topic(토픽) 과 Partition(파티션)
    &lt;ul&gt;
      &lt;li&gt;토픽은 데이터를 구분하는 논리적 개념이고, 파티션은 토픽을 분할한 데이터 저장소 이다.&lt;/li&gt;
      &lt;li&gt;파티션마다 리플리케이션이 동작해 각 브로커마다 리더/팔로워가 설정되어 있다.&lt;/li&gt;
      &lt;li&gt;&lt;u&gt;파티션 수는 한 번 설정하면 증가는 가능하지만 줄일 수는 없다.&lt;/u&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Producer(프로듀서)
    &lt;ul&gt;
      &lt;li&gt;메시지를 생산하는 애플리케이션으로, 브로커의 토픽을 지정하여 메시지를 보낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Consumer(컨슈머)
    &lt;ul&gt;
      &lt;li&gt;저장된 메시지를 가져가서 사용하는 서버 또는 애플리케이션&lt;/li&gt;
      &lt;li&gt;특정 파티션을 관리하고 있는 파티션 리더에게 메시지 가져오기 요청을 한다.&lt;/li&gt;
      &lt;li&gt;각 요청에 오프셋을 명시할 수 있어, 컨슈머는 가져올 메시지의 위치를 조정할 수 있고, 이미 가져온 데이터도 다시 가져올 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kafka-동작-방식&quot;&gt;Kafka 동작 방식&lt;/h2&gt;
&lt;p&gt;카프카에서 각 파티션마다 메시지가 저장되는 위치를 오프셋이라고 한다. 오프셋은 파티션내에서 순차증가하는 유일한 숫자이다. 카프카는 오프셋을 통해 메시지
순서를 보장한다.&lt;/p&gt;</content><author><name>MJ</name></author><category term="kafka" /><summary type="html">카프카란 카프카는 Pub/Sub 모델 기반의 메시징 서버로, 링크드인에서 자체적으로 사용하기 위해 만든 분산 데이터 스트림 플랫폼이다. 기존 메세징 시스템에 비해 처리량이 높고, 파티셔닝이나 복제기능을 갖고 있어 대규모 메시지 처리에 적합한 시스템이다. 카프카는 사내 모든 데이터시스템이나 마이크로서비스와 연결된 이벤트/데이터 스트림 파이프라인의 중앙허브 역할을 목적으로 개발되었고, 카프카 로고에도 이런 철학이 잘 반영되어 있다. 카프카의 특징은 다음과 같다. 멀티 프로듀서, 멀티 컨슈머 하나의 토픽에 여러 프로듀서나 컨슈머가 접근 가능하다. 프로듀서는 하나 이상의 토픽에 메세지를 보낼수 있고, 컨슈머 역시 하나 이상의 토픽으로부터 메세지를 읽어올 수 있다. 메세지의 저장 일반적인 메시징 시스템에서는 컨슈머가 메시지를 읽어가면 큐에서 바로 메시지를 삭제한다. 하지만 카프카는 일정 주기만큼 메시지를 디스크에 저장해둔다. 따라서 컨슈머의 메시지 처리가 늦어지거나 컨슈머의 중단이 발생하더라도 메시지의 손실이 없으며, 한번 읽은 메시지를 여러번 다시 읽을 수 있다. 확장성(Scalability) 카프카 클러스터는 3개(권장)의 브로커에서 수십대의 브로커로 확장이 가능하다. 확장 작업도 서비스 중단없이 비교적 간단하게 진행할 수 있다. 빠른 처리 속도 카프카는 배치전송(작은 메시지들을 묶어 한번에 보내서 네트워크 왕복 오버헤드를 줄임)과 페이지 캐시(메모리의 일부를 사용)를 사용해 속도가 빠르다. 고가용성(High availability), 결함에 강함(Fault-tolerant) 카프카는 분산 시스템을 사용하기 때문에 단일 시스템보다 더 높은 성능을 얻을 수 있고 시스템 확장이 용이하다. 또한 분산시스템 중 하나의 서버에 장애가 발생해도 다른 서버가 데이터 손실 없이 작업을 대신한다. 2PC(PhaseCommit) 카프카는 정확히 한번의 메시지 저장을 보장한다……….(작업예정) Kafka 구성 요소와 역할 Zookeeper(주키퍼) 카프카는 분산 애플리케이션을 관리하는 코디네이션으로 주키퍼를 사용한다. 주키퍼는 분산 각 애플리케이션의 정보를 관리하고, 동기화등을 처리한다. 분산 애플리케이션들은 각각 클라이언트가 되어 주키퍼 서버들과 커넥션을 맺어 상태정보 등을 주고 받는다. 상태 정보들은 주키퍼 지노드(znode)라 불리는곳에 key-value 형태로 저장되고 이값을 가지고 분산 애플리케이션들은 서로 데이터를 주고 받는다. Broker(브로커) 카프카 애플리케이션이 설치되어 있는 서버로 데이터 저장소 역할을 한다. Topic(토픽) 과 Partition(파티션) 토픽은 데이터를 구분하는 논리적 개념이고, 파티션은 토픽을 분할한 데이터 저장소 이다. 파티션마다 리플리케이션이 동작해 각 브로커마다 리더/팔로워가 설정되어 있다. 파티션 수는 한 번 설정하면 증가는 가능하지만 줄일 수는 없다. Producer(프로듀서) 메시지를 생산하는 애플리케이션으로, 브로커의 토픽을 지정하여 메시지를 보낸다. Consumer(컨슈머) 저장된 메시지를 가져가서 사용하는 서버 또는 애플리케이션 특정 파티션을 관리하고 있는 파티션 리더에게 메시지 가져오기 요청을 한다. 각 요청에 오프셋을 명시할 수 있어, 컨슈머는 가져올 메시지의 위치를 조정할 수 있고, 이미 가져온 데이터도 다시 가져올 수 있다. Kafka 동작 방식 카프카에서 각 파티션마다 메시지가 저장되는 위치를 오프셋이라고 한다. 오프셋은 파티션내에서 순차증가하는 유일한 숫자이다. 카프카는 오프셋을 통해 메시지 순서를 보장한다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/default-social-image.png" /><media:content medium="image" url="http://localhost:4000/assets/default-social-image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>